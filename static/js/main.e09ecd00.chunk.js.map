{"version":3,"sources":["components/Gallery.js","components/Navbar.js","components/Spinner.js","components/App.js","registerServiceWorker.js","index.js"],"names":["Gallery","items","undefined","className","map","item","index","volumeInfo","title","imageLinks","infoLink","key","href","target","rel","src","thumbnail","alt","Navbar","Spinner","role","App","useState","query","setQuery","setItems","isLoading","setIsLoading","isError","setIsError","a","axios","get","result","data","onSubmit","event","search","preventDefault","type","placeholder","aria-label","onChange","e","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"ySAoCeA,MA/Bf,YAA6B,IAAVC,EAAS,EAATA,MACjB,YAAcC,IAAVD,EACK,kDAGP,yBAAKE,UAAU,OACZF,EAAMG,KAAI,SAACC,EAAMC,GAAW,IAAD,EACYD,EAAKE,WAArCC,EADoB,EACpBA,MAAOC,EADa,EACbA,WAAYC,EADC,EACDA,SACzB,OACE,yBAAKP,UAAU,MAAMQ,IAAKL,GACxB,yBAAKH,UAAU,uBACb,uBAAGS,KAAMF,EAAUG,OAAO,SAASC,IAAI,uBACrC,yBACEC,SACiBb,IAAfO,EAA2BA,EAAWO,UAhBxD,6EAkBgBb,UAAU,eACVc,IAAI,QAEN,yBAAKd,UAAU,aACb,uBAAGA,UAAU,aAAaK,Y,MCN7BU,MAhBf,WACE,OACE,kBAAC,WAAD,KACE,yBAAKf,UAAU,8BACb,yBAAKA,UAAU,mBACb,uBAAGA,UAAU,gBAAb,iBACA,uBAAGA,UAAU,iCAAb,8BAC6B,uBAAGA,UAAU,kBAD1C,uBCGKgB,MAVf,WACE,OACE,kBAAC,WAAD,KACE,yBAAKhB,UAAU,iBAAiBiB,KAAK,UACnC,0BAAMjB,UAAU,WAAhB,iB,uBC2DOkB,MA1Df,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEaF,mBAAS,IAFtB,mBAENrB,EAFM,KAECwB,EAFD,OAGqBH,oBAAS,GAH9B,mBAGNI,EAHM,KAGKC,EAHL,OAIiBL,oBAAS,GAJ1B,mBAINM,EAJM,KAIGC,EAJH,iDAMb,4BAAAC,EAAA,6DACED,GAAW,GACXF,GAAa,GACI,iDAHnB,kBAKyBI,IAAMC,IAAN,UAFN,kDAEM,OAAwBT,IALjD,OAKUU,EALV,OAMIR,EAASQ,EAAOC,KAAKjC,OANzB,kDAQI4B,GAAW,GARf,QAUEF,GAAa,GAVf,2DANa,sBAmBb,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,MACA,yBAAKxB,UAAU,yBACb,0BACEgC,SAAU,SAACC,IAxBN,mCAyBHC,GACAD,EAAME,mBAGR,yBAAKnC,UAAU,UACb,yBAAKA,UAAU,oBACb,2BACEoC,KAAK,OACLpC,UAAU,eACVqC,YAAY,oCACZC,aAAW,oCACXC,SAAU,SAACC,GAAD,OAAOnB,EAASmB,EAAE9B,OAAO+B,UAErC,yBAAKzC,UAAU,sBACb,4BAAQA,UAAU,4BAA4BoC,KAAK,UACjD,uBAAGpC,UAAU,uBAMtByB,GAAW,yDACXF,EAAY,kBAAC,EAAD,MAAc,kBAAC,EAAD,CAASzB,MAAOA,IAC3C,6BACA,6BACA,6BA5BF,6DA8BE,gCCjDF4C,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,MC1EjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDelC,WACb,GAA6C,kBAAmBlB,UAAW,CAGzE,GADkB,IAAImB,IAAIC,iBAAwB1B,OAAOC,UAC3C0B,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,QAAQ,WAC9B,IAAMvB,EAAK,UAAMqB,iBAAN,sBAEP5B,IAiDV,SAAiCO,GAE/BwB,MAAMxB,GACHI,MAAK,SAAAqB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQ/C,IAAI,gBAAgBgD,QAAQ,cAG7C3B,UAAUC,cAAc2B,MAAMzB,MAAK,SAAAC,GACjCA,EAAayB,aAAa1B,MAAK,WAC7BT,OAAOC,SAASmC,eAKpBhC,EAAgBC,MAGnBc,OAAM,WACLF,QAAQC,IACN,oEArEAmB,CAAwBhC,GAIxBC,UAAUC,cAAc2B,MAAMzB,MAAK,WACjCQ,QAAQC,IACN,gHAMJd,EAAgBC,OC1CxBiC,K","file":"static/js/main.e09ecd00.chunk.js","sourcesContent":["import React from 'react';\nimport 'components/Gallery.css';\nlet alternate =\n  'https://upload.wikimedia.org/wikipedia/commons/a/ac/No_image_available.svg';\n\nfunction Gallery({ items }) {\n  if (items === undefined) {\n    return <div>No books found...</div>;\n  }\n  return (\n    <div className=\"row\">\n      {items.map((item, index) => {\n        let { title, imageLinks, infoLink } = item.volumeInfo;\n        return (\n          <div className=\"col\" key={index}>\n            <div className=\"card mb-4 shadow-sm\">\n              <a href={infoLink} target=\"_blank\" rel=\"noopener noreferrer\">\n                <img\n                  src={\n                    imageLinks !== undefined ? imageLinks.thumbnail : alternate\n                  }\n                  className=\"card-img-top\"\n                  alt=\"...\"\n                />\n                <div className=\"card-body\">\n                  <p className=\"card-text\">{title}</p>\n                </div>\n              </a>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default Gallery;\n","import React, { Fragment } from \"react\";\nimport \"components/Navbar.css\";\n\nfunction Navbar() {\n  return (\n    <Fragment>\n      <nav className=\"navbar navbar-dark bg-dark\">\n        <div className=\"container-fluid\">\n          <a className=\"navbar-brand\">Book Explorer</a>\n          <a className=\"text-light font-weight-normal\">\n            Search for books using the <i className=\"fab fa-google\" />\n            oogle Books API\n          </a>\n        </div>\n      </nav>\n    </Fragment>\n  );\n}\n\nexport default Navbar;\n\n// import React from 'react';\n\n// function Navbar() {\n//   return (\n//     <div className=\"d-flex flex-column flex-md-row align-items-center p-3 px-md-4 mb-3 bg-white border-bottom shadow-sm\">\n//       <h5 className=\"my-0 mr-md-auto font-weight-normal\">Book Explorer</h5>\n//       <nav className=\"my-2 my-md-0 mr-md-3\">\n//         <a className=\"p-2 text-dark font-weight-normal\">\n//           Search for books using the <i className=\"fab fa-google\" />\n//           oogle Books API\n//         </a>\n//       </nav>\n//     </div>\n//   );\n// }\n\n// export default Navbar;\n","import React, { Fragment } from 'react';\n\nfunction Spinner() {\n  return (\n    <Fragment>\n      <div className=\"spinner-border\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default Spinner;\n","import React, { useState, Fragment } from \"react\";\nimport Gallery from \"components/Gallery\";\nimport Navbar from \"components/Navbar\";\nimport Spinner from \"components/Spinner\";\nimport axios from \"axios\";\nimport \"components/App.css\";\n\nfunction App() {\n  const [query, setQuery] = useState(\"\");\n  const [items, setItems] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  async function search() {\n    setIsError(false);\n    setIsLoading(true);\n    const BASE_URL = \"https://www.googleapis.com/books/v1/volumes?q=\";\n    try {\n      const result = await axios.get(`${BASE_URL}${query}`);\n      setItems(result.data.items);\n    } catch (error) {\n      setIsError(true);\n    }\n    setIsLoading(false);\n  }\n\n  return (\n    <Fragment>\n      <Navbar />\n      <div className=\"container text-center\">\n        <form\n          onSubmit={(event) => {\n            search();\n            event.preventDefault();\n          }}\n        >\n          <div className=\"col-md\">\n            <div className=\"input-group mb-3\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                placeholder=\"Search for a book title or Author\"\n                aria-label=\"Search for a book title or Author\"\n                onChange={(e) => setQuery(e.target.value)}\n              />\n              <div className=\"input-group-append\">\n                <button className=\"btn btn-outline-secondary\" type=\"submit\">\n                  <i className=\"fas fa-search\" />\n                </button>\n              </div>\n            </div>\n          </div>\n        </form>\n        {isError && <div>Something went wrong ...</div>}\n        {isLoading ? <Spinner /> : <Gallery items={items} />}\n        <br />\n        <br />\n        <br />\n        This app is build using React, Font Awesome, &amp; Bootstrap 5\n        <br />\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}